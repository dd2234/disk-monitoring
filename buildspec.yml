AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function to monitor EC2 NetworkOut usage and send results via email.

Parameters:
  S3BucketName:
    Description: 'The S3 bucket name where the Lambda function zip file is stored'
    Type: String
  S3Key:
    Description: 'The S3 key of the Lambda function zip file'
    Type: String
  EmailAddress:
    Description: 'The email address to send the monitoring results to'
    Type: String
  DataTransferQuotaMB:
    Description: 'The data transfer quota in MB for NetworkOut'
    Type: Number
  InstanceID:
    Description: 'The ID of the EC2 instance to monitor'
    Type: String

Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaCloudWatchSNSPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'ec2:DescribeInstances'
                  - 'ec2:StopInstances'
                  - 'sns:Publish'
                  - 'ses:SendEmail'
                  - 'pricing:GetProducts'
                Resource: '*'

  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: 'SystemMetricsResults'

  SNSSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref SNSTopic
      Protocol: 'email'
      Endpoint: !Ref EmailAddress

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'SystemMetricsMonitor'
      Handler: 'lambda_function.lambda_handler'
      Runtime: 'python3.8'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3Key
      Environment:
        Variables:
          SNS_TOPIC: !Ref SNSTopic
          DATA_TRANSFER_QUOTA_MB: !Ref DataTransferQuotaMB
          EMAIL_ADDRESS: !Ref EmailAddress
          INSTANCE_ID: !Ref InstanceID
      Timeout: 60

  CloudWatchRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: 'rate(1 hour)'
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: 'LambdaFunctionTarget'

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt CloudWatchRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt LambdaFunction.Arn
  SNSTopicArn:
    Description: 'ARN of the SNS Topic'
    Value: !Ref SNSTopic
